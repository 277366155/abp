@using Volo.Abp.UI.Navigation
@{
    var elementId = MenuItem.MenuItem.ElementId ?? "MenuItem_" + MenuItem.MenuItem.Name.Replace(".", "_");
    var cssClass = string.IsNullOrEmpty(MenuItem.MenuItem.CssClass) ? string.Empty : MenuItem.MenuItem.CssClass;
    var disabled = MenuItem.MenuItem.IsDisabled ? "disabled" : string.Empty;
    var url = MenuItem.MenuItem.Url == null ? "#" : MenuItem.MenuItem.Url.TrimStart('/', '~');
    var customComponentType = MenuItem.MenuItem.GetComponentTypeOrDefault();
}
@if (MenuItem.MenuItem.IsLeaf)
{
    if (customComponentType != null && typeof(ComponentBase).IsAssignableFrom(customComponentType))
    {
        <DynamicComponent Type="@customComponentType" />
    }
    else if (MenuItem.MenuItem.Url != null)
    {
        <li class="nav-item @cssClass @disabled" id="@elementId">
            <a class="nav-link" href="@url" target="@MenuItem.MenuItem.Target">
                @if (MenuItem.MenuItem.Icon != null)
                {
                    if (MenuItem.MenuItem.Icon.StartsWith("fa"))
                    {
                        <i class="@MenuItem.MenuItem.Icon me-1"></i>
                    }
                }
                @MenuItem.MenuItem.DisplayName
            </a>
        </li>
    }
}
else
{
    <li class="nav-item">
        <div class="dropdown">
            @if (customComponentType != null && typeof(ComponentBase).IsAssignableFrom(customComponentType))
            {
                <DynamicComponent Type="@customComponentType" />
            }
            else
            {
                <a class="nav-link dropdown-toggle" @onclick="ToggleMenu" id="Menu_@(MenuItem.MenuItem.Name)"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @if (MenuItem.MenuItem.Icon != null)
                    {
                        if (MenuItem.MenuItem.Icon.StartsWith("fa"))
                        {
                            <i class="@MenuItem.MenuItem.Icon me-1"></i>
                        }
                    }
                    @MenuItem.MenuItem.DisplayName
                </a>
            }

            <div class="dropdown-menu border-0 shadow-sm @(MenuItem.IsOpen ? "show" : "")" aria-labelledby="Menu_@(MenuItem.MenuItem.Name)">
                @foreach (var childMenuItem in MenuItem.Items)
                {
                    <SecondLevelNavMenuItem Menu="Menu" MenuItem="childMenuItem" />
                }
            </div>
        </div>
    </li>
}
